#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.17929
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace FA
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="AccountDB")]
	public partial class AccountsDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertChartOfAccount(ChartOfAccount instance);
    partial void UpdateChartOfAccount(ChartOfAccount instance);
    partial void DeleteChartOfAccount(ChartOfAccount instance);
    partial void InsertFiscalYear(FiscalYear instance);
    partial void UpdateFiscalYear(FiscalYear instance);
    partial void DeleteFiscalYear(FiscalYear instance);
    partial void InsertJournal(Journal instance);
    partial void UpdateJournal(Journal instance);
    partial void DeleteJournal(Journal instance);
    partial void InsertLedger(Ledger instance);
    partial void UpdateLedger(Ledger instance);
    partial void DeleteLedger(Ledger instance);
    partial void InsertPosting(Posting instance);
    partial void UpdatePosting(Posting instance);
    partial void DeletePosting(Posting instance);
    #endregion
		
		public AccountsDataContext() : 
				base(global::FA.Properties.Settings.Default.AccountDBConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public AccountsDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public AccountsDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public AccountsDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public AccountsDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<BalanceSheet> BalanceSheets
		{
			get
			{
				return this.GetTable<BalanceSheet>();
			}
		}
		
		public System.Data.Linq.Table<ChartOfAccount> ChartOfAccounts
		{
			get
			{
				return this.GetTable<ChartOfAccount>();
			}
		}
		
		public System.Data.Linq.Table<FiscalYear> FiscalYears
		{
			get
			{
				return this.GetTable<FiscalYear>();
			}
		}
		
		public System.Data.Linq.Table<IncomeStatement> IncomeStatements
		{
			get
			{
				return this.GetTable<IncomeStatement>();
			}
		}
		
		public System.Data.Linq.Table<Journal> Journals
		{
			get
			{
				return this.GetTable<Journal>();
			}
		}
		
		public System.Data.Linq.Table<Ledger> Ledgers
		{
			get
			{
				return this.GetTable<Ledger>();
			}
		}
		
		public System.Data.Linq.Table<OwnerEquity> OwnerEquities
		{
			get
			{
				return this.GetTable<OwnerEquity>();
			}
		}
		
		public System.Data.Linq.Table<Posting> Postings
		{
			get
			{
				return this.GetTable<Posting>();
			}
		}
		
		public System.Data.Linq.Table<TrialBalance> TrialBalances
		{
			get
			{
				return this.GetTable<TrialBalance>();
			}
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.CheckNameOfChartOfAccounts")]
		public ISingleResult<CheckNameOfChartOfAccountsResult> CheckNameOfChartOfAccounts([global::System.Data.Linq.Mapping.ParameterAttribute(DbType="NVarChar(50)")] string name)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), name);
			return ((ISingleResult<CheckNameOfChartOfAccountsResult>)(result.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.ClearAccountDB")]
		public int ClearAccountDB()
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())));
			return ((int)(result.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.DeleteChartOfAccounts")]
		public int DeleteChartOfAccounts([global::System.Data.Linq.Mapping.ParameterAttribute(DbType="Int")] System.Nullable<int> id)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), id);
			return ((int)(result.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.GenerateTrialBalance")]
		public ISingleResult<GenerateTrialBalanceResult> GenerateTrialBalance([global::System.Data.Linq.Mapping.ParameterAttribute(DbType="Date")] System.Nullable<System.DateTime> from, [global::System.Data.Linq.Mapping.ParameterAttribute(DbType="Date")] System.Nullable<System.DateTime> to)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), from, to);
			return ((ISingleResult<GenerateTrialBalanceResult>)(result.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.GetAccountId")]
		public ISingleResult<GetAccountIdResult> GetAccountId([global::System.Data.Linq.Mapping.ParameterAttribute(DbType="NVarChar(50)")] string type)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), type);
			return ((ISingleResult<GetAccountIdResult>)(result.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.InsertChartOfAccounts")]
		public int InsertChartOfAccounts([global::System.Data.Linq.Mapping.ParameterAttribute(DbType="NVarChar(50)")] string num, [global::System.Data.Linq.Mapping.ParameterAttribute(DbType="NVarChar(50)")] string name, [global::System.Data.Linq.Mapping.ParameterAttribute(DbType="NVarChar(50)")] string type, [global::System.Data.Linq.Mapping.ParameterAttribute(DbType="Date")] System.Nullable<System.DateTime> e_date)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), num, name, type, e_date);
			return ((int)(result.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.InsertFiscalYear")]
		public int InsertFiscalYear([global::System.Data.Linq.Mapping.ParameterAttribute(DbType="Date")] System.Nullable<System.DateTime> from_n, [global::System.Data.Linq.Mapping.ParameterAttribute(DbType="Date")] System.Nullable<System.DateTime> to_n, [global::System.Data.Linq.Mapping.ParameterAttribute(DbType="Date")] System.Nullable<System.DateTime> to)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), from_n, to_n, to);
			return ((int)(result.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.InsertJournalAndPosting")]
		public int InsertJournalAndPosting([global::System.Data.Linq.Mapping.ParameterAttribute(Name="ACCiD", DbType="Int")] System.Nullable<int> aCCiD, [global::System.Data.Linq.Mapping.ParameterAttribute(DbType="NVarChar(50)")] string acc_num, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="Amount", DbType="Float")] System.Nullable<double> amount, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="Des", DbType="NVarChar(MAX)")] string des, [global::System.Data.Linq.Mapping.ParameterAttribute(DbType="NVarChar(50)")] string type, [global::System.Data.Linq.Mapping.ParameterAttribute(DbType="Date")] System.Nullable<System.DateTime> eDate)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), aCCiD, acc_num, amount, des, type, eDate);
			return ((int)(result.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.ShowChartOfAccounts")]
		public ISingleResult<ShowChartOfAccountsResult> ShowChartOfAccounts()
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())));
			return ((ISingleResult<ShowChartOfAccountsResult>)(result.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.ShowFiscalYear")]
		public ISingleResult<ShowFiscalYearResult> ShowFiscalYear()
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())));
			return ((ISingleResult<ShowFiscalYearResult>)(result.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.ShowLedgers")]
		public ISingleResult<ShowLedgersResult> ShowLedgers()
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())));
			return ((ISingleResult<ShowLedgersResult>)(result.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.UpdateFiscalYearOnlogin")]
		public int UpdateFiscalYearOnlogin([global::System.Data.Linq.Mapping.ParameterAttribute(DbType="Date")] System.Nullable<System.DateTime> to)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), to);
			return ((int)(result.ReturnValue));
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.BalanceSheet")]
	public partial class BalanceSheet
	{
		
		private string _ACCOUNTID;
		
		private string _ACCOUNTNAME;
		
		private System.Nullable<double> _ACCOUNTTOTAL;
		
		private string _TYPE;
		
		public BalanceSheet()
		{
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ACCOUNTID", DbType="NVarChar(50)")]
		public string ACCOUNTID
		{
			get
			{
				return this._ACCOUNTID;
			}
			set
			{
				if ((this._ACCOUNTID != value))
				{
					this._ACCOUNTID = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ACCOUNTNAME", DbType="NVarChar(50)")]
		public string ACCOUNTNAME
		{
			get
			{
				return this._ACCOUNTNAME;
			}
			set
			{
				if ((this._ACCOUNTNAME != value))
				{
					this._ACCOUNTNAME = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ACCOUNTTOTAL", DbType="Float")]
		public System.Nullable<double> ACCOUNTTOTAL
		{
			get
			{
				return this._ACCOUNTTOTAL;
			}
			set
			{
				if ((this._ACCOUNTTOTAL != value))
				{
					this._ACCOUNTTOTAL = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TYPE", DbType="NVarChar(50)")]
		public string TYPE
		{
			get
			{
				return this._TYPE;
			}
			set
			{
				if ((this._TYPE != value))
				{
					this._TYPE = value;
				}
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.ChartOfAccounts")]
	public partial class ChartOfAccount : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _id;
		
		private string _num;
		
		private string _name;
		
		private string _type;
		
		private System.Nullable<System.DateTime> _e_date;
		
		private EntitySet<Journal> _Journals;
		
		private EntitySet<Posting> _Postings;
		
		private EntityRef<Ledger> _Ledger;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidChanging(int value);
    partial void OnidChanged();
    partial void OnnumChanging(string value);
    partial void OnnumChanged();
    partial void OnnameChanging(string value);
    partial void OnnameChanged();
    partial void OntypeChanging(string value);
    partial void OntypeChanged();
    partial void One_dateChanging(System.Nullable<System.DateTime> value);
    partial void One_dateChanged();
    #endregion
		
		public ChartOfAccount()
		{
			this._Journals = new EntitySet<Journal>(new Action<Journal>(this.attach_Journals), new Action<Journal>(this.detach_Journals));
			this._Postings = new EntitySet<Posting>(new Action<Posting>(this.attach_Postings), new Action<Posting>(this.detach_Postings));
			this._Ledger = default(EntityRef<Ledger>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int id
		{
			get
			{
				return this._id;
			}
			set
			{
				if ((this._id != value))
				{
					this.OnidChanging(value);
					this.SendPropertyChanging();
					this._id = value;
					this.SendPropertyChanged("id");
					this.OnidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_num", DbType="NVarChar(50)")]
		public string num
		{
			get
			{
				return this._num;
			}
			set
			{
				if ((this._num != value))
				{
					this.OnnumChanging(value);
					this.SendPropertyChanging();
					this._num = value;
					this.SendPropertyChanged("num");
					this.OnnumChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_name", DbType="NVarChar(MAX)")]
		public string name
		{
			get
			{
				return this._name;
			}
			set
			{
				if ((this._name != value))
				{
					this.OnnameChanging(value);
					this.SendPropertyChanging();
					this._name = value;
					this.SendPropertyChanged("name");
					this.OnnameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_type", DbType="NVarChar(50)")]
		public string type
		{
			get
			{
				return this._type;
			}
			set
			{
				if ((this._type != value))
				{
					if (this._Ledger.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OntypeChanging(value);
					this.SendPropertyChanging();
					this._type = value;
					this.SendPropertyChanged("type");
					this.OntypeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_e_date", DbType="Date")]
		public System.Nullable<System.DateTime> e_date
		{
			get
			{
				return this._e_date;
			}
			set
			{
				if ((this._e_date != value))
				{
					this.One_dateChanging(value);
					this.SendPropertyChanging();
					this._e_date = value;
					this.SendPropertyChanged("e_date");
					this.One_dateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ChartOfAccount_Journal", Storage="_Journals", ThisKey="id", OtherKey="acc_id")]
		public EntitySet<Journal> Journals
		{
			get
			{
				return this._Journals;
			}
			set
			{
				this._Journals.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ChartOfAccount_Posting", Storage="_Postings", ThisKey="id", OtherKey="acc_id")]
		public EntitySet<Posting> Postings
		{
			get
			{
				return this._Postings;
			}
			set
			{
				this._Postings.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Ledger_ChartOfAccount", Storage="_Ledger", ThisKey="type", OtherKey="type", IsForeignKey=true)]
		public Ledger Ledger
		{
			get
			{
				return this._Ledger.Entity;
			}
			set
			{
				Ledger previousValue = this._Ledger.Entity;
				if (((previousValue != value) 
							|| (this._Ledger.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Ledger.Entity = null;
						previousValue.ChartOfAccounts.Remove(this);
					}
					this._Ledger.Entity = value;
					if ((value != null))
					{
						value.ChartOfAccounts.Add(this);
						this._type = value.type;
					}
					else
					{
						this._type = default(string);
					}
					this.SendPropertyChanged("Ledger");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Journals(Journal entity)
		{
			this.SendPropertyChanging();
			entity.ChartOfAccount = this;
		}
		
		private void detach_Journals(Journal entity)
		{
			this.SendPropertyChanging();
			entity.ChartOfAccount = null;
		}
		
		private void attach_Postings(Posting entity)
		{
			this.SendPropertyChanging();
			entity.ChartOfAccount = this;
		}
		
		private void detach_Postings(Posting entity)
		{
			this.SendPropertyChanging();
			entity.ChartOfAccount = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.FiscalYear")]
	public partial class FiscalYear : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _id;
		
		private System.Nullable<System.DateTime> _f_from;
		
		private System.Nullable<System.DateTime> _f_to;
		
		private System.Nullable<System.DateTime> _e_date;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidChanging(int value);
    partial void OnidChanged();
    partial void Onf_fromChanging(System.Nullable<System.DateTime> value);
    partial void Onf_fromChanged();
    partial void Onf_toChanging(System.Nullable<System.DateTime> value);
    partial void Onf_toChanged();
    partial void One_dateChanging(System.Nullable<System.DateTime> value);
    partial void One_dateChanged();
    #endregion
		
		public FiscalYear()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int id
		{
			get
			{
				return this._id;
			}
			set
			{
				if ((this._id != value))
				{
					this.OnidChanging(value);
					this.SendPropertyChanging();
					this._id = value;
					this.SendPropertyChanged("id");
					this.OnidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_f_from", DbType="Date")]
		public System.Nullable<System.DateTime> f_from
		{
			get
			{
				return this._f_from;
			}
			set
			{
				if ((this._f_from != value))
				{
					this.Onf_fromChanging(value);
					this.SendPropertyChanging();
					this._f_from = value;
					this.SendPropertyChanged("f_from");
					this.Onf_fromChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_f_to", DbType="Date")]
		public System.Nullable<System.DateTime> f_to
		{
			get
			{
				return this._f_to;
			}
			set
			{
				if ((this._f_to != value))
				{
					this.Onf_toChanging(value);
					this.SendPropertyChanging();
					this._f_to = value;
					this.SendPropertyChanged("f_to");
					this.Onf_toChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_e_date", DbType="Date")]
		public System.Nullable<System.DateTime> e_date
		{
			get
			{
				return this._e_date;
			}
			set
			{
				if ((this._e_date != value))
				{
					this.One_dateChanging(value);
					this.SendPropertyChanging();
					this._e_date = value;
					this.SendPropertyChanged("e_date");
					this.One_dateChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.IncomeStatement")]
	public partial class IncomeStatement
	{
		
		private string _Type;
		
		private string _AccountId;
		
		private string _AccountName;
		
		private System.Nullable<double> _value;
		
		private System.Nullable<double> _NetProfit;
		
		public IncomeStatement()
		{
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Type", DbType="NVarChar(50)")]
		public string Type
		{
			get
			{
				return this._Type;
			}
			set
			{
				if ((this._Type != value))
				{
					this._Type = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AccountId", DbType="NVarChar(50)")]
		public string AccountId
		{
			get
			{
				return this._AccountId;
			}
			set
			{
				if ((this._AccountId != value))
				{
					this._AccountId = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AccountName", DbType="NVarChar(50)")]
		public string AccountName
		{
			get
			{
				return this._AccountName;
			}
			set
			{
				if ((this._AccountName != value))
				{
					this._AccountName = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_value", DbType="Float")]
		public System.Nullable<double> value
		{
			get
			{
				return this._value;
			}
			set
			{
				if ((this._value != value))
				{
					this._value = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_NetProfit", DbType="Float")]
		public System.Nullable<double> NetProfit
		{
			get
			{
				return this._NetProfit;
			}
			set
			{
				if ((this._NetProfit != value))
				{
					this._NetProfit = value;
				}
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Journal")]
	public partial class Journal : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _id;
		
		private System.Nullable<int> _acc_id;
		
		private System.Nullable<double> _amount;
		
		private string _des;
		
		private string _type;
		
		private System.Nullable<System.DateTime> _e_date;
		
		private EntityRef<ChartOfAccount> _ChartOfAccount;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidChanging(int value);
    partial void OnidChanged();
    partial void Onacc_idChanging(System.Nullable<int> value);
    partial void Onacc_idChanged();
    partial void OnamountChanging(System.Nullable<double> value);
    partial void OnamountChanged();
    partial void OndesChanging(string value);
    partial void OndesChanged();
    partial void OntypeChanging(string value);
    partial void OntypeChanged();
    partial void One_dateChanging(System.Nullable<System.DateTime> value);
    partial void One_dateChanged();
    #endregion
		
		public Journal()
		{
			this._ChartOfAccount = default(EntityRef<ChartOfAccount>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int id
		{
			get
			{
				return this._id;
			}
			set
			{
				if ((this._id != value))
				{
					this.OnidChanging(value);
					this.SendPropertyChanging();
					this._id = value;
					this.SendPropertyChanged("id");
					this.OnidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_acc_id", DbType="Int")]
		public System.Nullable<int> acc_id
		{
			get
			{
				return this._acc_id;
			}
			set
			{
				if ((this._acc_id != value))
				{
					if (this._ChartOfAccount.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.Onacc_idChanging(value);
					this.SendPropertyChanging();
					this._acc_id = value;
					this.SendPropertyChanged("acc_id");
					this.Onacc_idChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_amount", DbType="Float")]
		public System.Nullable<double> amount
		{
			get
			{
				return this._amount;
			}
			set
			{
				if ((this._amount != value))
				{
					this.OnamountChanging(value);
					this.SendPropertyChanging();
					this._amount = value;
					this.SendPropertyChanged("amount");
					this.OnamountChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_des", DbType="NVarChar(MAX)")]
		public string des
		{
			get
			{
				return this._des;
			}
			set
			{
				if ((this._des != value))
				{
					this.OndesChanging(value);
					this.SendPropertyChanging();
					this._des = value;
					this.SendPropertyChanged("des");
					this.OndesChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_type", DbType="NVarChar(MAX)")]
		public string type
		{
			get
			{
				return this._type;
			}
			set
			{
				if ((this._type != value))
				{
					this.OntypeChanging(value);
					this.SendPropertyChanging();
					this._type = value;
					this.SendPropertyChanged("type");
					this.OntypeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_e_date", DbType="Date")]
		public System.Nullable<System.DateTime> e_date
		{
			get
			{
				return this._e_date;
			}
			set
			{
				if ((this._e_date != value))
				{
					this.One_dateChanging(value);
					this.SendPropertyChanging();
					this._e_date = value;
					this.SendPropertyChanged("e_date");
					this.One_dateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ChartOfAccount_Journal", Storage="_ChartOfAccount", ThisKey="acc_id", OtherKey="id", IsForeignKey=true)]
		public ChartOfAccount ChartOfAccount
		{
			get
			{
				return this._ChartOfAccount.Entity;
			}
			set
			{
				ChartOfAccount previousValue = this._ChartOfAccount.Entity;
				if (((previousValue != value) 
							|| (this._ChartOfAccount.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._ChartOfAccount.Entity = null;
						previousValue.Journals.Remove(this);
					}
					this._ChartOfAccount.Entity = value;
					if ((value != null))
					{
						value.Journals.Add(this);
						this._acc_id = value.id;
					}
					else
					{
						this._acc_id = default(Nullable<int>);
					}
					this.SendPropertyChanged("ChartOfAccount");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Ledgers")]
	public partial class Ledger : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _type;
		
		private System.Nullable<System.DateTime> _e_date;
		
		private EntitySet<ChartOfAccount> _ChartOfAccounts;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OntypeChanging(string value);
    partial void OntypeChanged();
    partial void One_dateChanging(System.Nullable<System.DateTime> value);
    partial void One_dateChanged();
    #endregion
		
		public Ledger()
		{
			this._ChartOfAccounts = new EntitySet<ChartOfAccount>(new Action<ChartOfAccount>(this.attach_ChartOfAccounts), new Action<ChartOfAccount>(this.detach_ChartOfAccounts));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_type", DbType="NVarChar(50) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string type
		{
			get
			{
				return this._type;
			}
			set
			{
				if ((this._type != value))
				{
					this.OntypeChanging(value);
					this.SendPropertyChanging();
					this._type = value;
					this.SendPropertyChanged("type");
					this.OntypeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_e_date", DbType="Date")]
		public System.Nullable<System.DateTime> e_date
		{
			get
			{
				return this._e_date;
			}
			set
			{
				if ((this._e_date != value))
				{
					this.One_dateChanging(value);
					this.SendPropertyChanging();
					this._e_date = value;
					this.SendPropertyChanged("e_date");
					this.One_dateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Ledger_ChartOfAccount", Storage="_ChartOfAccounts", ThisKey="type", OtherKey="type")]
		public EntitySet<ChartOfAccount> ChartOfAccounts
		{
			get
			{
				return this._ChartOfAccounts;
			}
			set
			{
				this._ChartOfAccounts.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_ChartOfAccounts(ChartOfAccount entity)
		{
			this.SendPropertyChanging();
			entity.Ledger = this;
		}
		
		private void detach_ChartOfAccounts(ChartOfAccount entity)
		{
			this.SendPropertyChanging();
			entity.Ledger = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.OwnerEquity")]
	public partial class OwnerEquity
	{
		
		private System.Nullable<double> _OldCapital;
		
		private System.Nullable<double> _newcapital;
		
		private System.Nullable<double> _netincome;
		
		private System.Nullable<double> _ow;
		
		private System.Nullable<double> _finalcapital;
		
		private System.Nullable<System.DateTime> _fromDate;
		
		private System.Nullable<System.DateTime> _toDate;
		
		public OwnerEquity()
		{
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_OldCapital", DbType="Float")]
		public System.Nullable<double> OldCapital
		{
			get
			{
				return this._OldCapital;
			}
			set
			{
				if ((this._OldCapital != value))
				{
					this._OldCapital = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_newcapital", DbType="Float")]
		public System.Nullable<double> newcapital
		{
			get
			{
				return this._newcapital;
			}
			set
			{
				if ((this._newcapital != value))
				{
					this._newcapital = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_netincome", DbType="Float")]
		public System.Nullable<double> netincome
		{
			get
			{
				return this._netincome;
			}
			set
			{
				if ((this._netincome != value))
				{
					this._netincome = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ow", DbType="Float")]
		public System.Nullable<double> ow
		{
			get
			{
				return this._ow;
			}
			set
			{
				if ((this._ow != value))
				{
					this._ow = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_finalcapital", DbType="Float")]
		public System.Nullable<double> finalcapital
		{
			get
			{
				return this._finalcapital;
			}
			set
			{
				if ((this._finalcapital != value))
				{
					this._finalcapital = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_fromDate", DbType="Date")]
		public System.Nullable<System.DateTime> fromDate
		{
			get
			{
				return this._fromDate;
			}
			set
			{
				if ((this._fromDate != value))
				{
					this._fromDate = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_toDate", DbType="Date")]
		public System.Nullable<System.DateTime> toDate
		{
			get
			{
				return this._toDate;
			}
			set
			{
				if ((this._toDate != value))
				{
					this._toDate = value;
				}
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Postings")]
	public partial class Posting : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _id;
		
		private System.Nullable<int> _acc_id;
		
		private string _acc_num;
		
		private string _type;
		
		private System.Nullable<double> _amount;
		
		private System.Nullable<System.DateTime> _e_date;
		
		private EntityRef<ChartOfAccount> _ChartOfAccount;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidChanging(int value);
    partial void OnidChanged();
    partial void Onacc_idChanging(System.Nullable<int> value);
    partial void Onacc_idChanged();
    partial void Onacc_numChanging(string value);
    partial void Onacc_numChanged();
    partial void OntypeChanging(string value);
    partial void OntypeChanged();
    partial void OnamountChanging(System.Nullable<double> value);
    partial void OnamountChanged();
    partial void One_dateChanging(System.Nullable<System.DateTime> value);
    partial void One_dateChanged();
    #endregion
		
		public Posting()
		{
			this._ChartOfAccount = default(EntityRef<ChartOfAccount>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int id
		{
			get
			{
				return this._id;
			}
			set
			{
				if ((this._id != value))
				{
					this.OnidChanging(value);
					this.SendPropertyChanging();
					this._id = value;
					this.SendPropertyChanged("id");
					this.OnidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_acc_id", DbType="Int")]
		public System.Nullable<int> acc_id
		{
			get
			{
				return this._acc_id;
			}
			set
			{
				if ((this._acc_id != value))
				{
					if (this._ChartOfAccount.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.Onacc_idChanging(value);
					this.SendPropertyChanging();
					this._acc_id = value;
					this.SendPropertyChanged("acc_id");
					this.Onacc_idChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_acc_num", DbType="NVarChar(50)")]
		public string acc_num
		{
			get
			{
				return this._acc_num;
			}
			set
			{
				if ((this._acc_num != value))
				{
					this.Onacc_numChanging(value);
					this.SendPropertyChanging();
					this._acc_num = value;
					this.SendPropertyChanged("acc_num");
					this.Onacc_numChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_type", DbType="NVarChar(MAX)")]
		public string type
		{
			get
			{
				return this._type;
			}
			set
			{
				if ((this._type != value))
				{
					this.OntypeChanging(value);
					this.SendPropertyChanging();
					this._type = value;
					this.SendPropertyChanged("type");
					this.OntypeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_amount", DbType="Float")]
		public System.Nullable<double> amount
		{
			get
			{
				return this._amount;
			}
			set
			{
				if ((this._amount != value))
				{
					this.OnamountChanging(value);
					this.SendPropertyChanging();
					this._amount = value;
					this.SendPropertyChanged("amount");
					this.OnamountChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_e_date", DbType="Date")]
		public System.Nullable<System.DateTime> e_date
		{
			get
			{
				return this._e_date;
			}
			set
			{
				if ((this._e_date != value))
				{
					this.One_dateChanging(value);
					this.SendPropertyChanging();
					this._e_date = value;
					this.SendPropertyChanged("e_date");
					this.One_dateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ChartOfAccount_Posting", Storage="_ChartOfAccount", ThisKey="acc_id", OtherKey="id", IsForeignKey=true)]
		public ChartOfAccount ChartOfAccount
		{
			get
			{
				return this._ChartOfAccount.Entity;
			}
			set
			{
				ChartOfAccount previousValue = this._ChartOfAccount.Entity;
				if (((previousValue != value) 
							|| (this._ChartOfAccount.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._ChartOfAccount.Entity = null;
						previousValue.Postings.Remove(this);
					}
					this._ChartOfAccount.Entity = value;
					if ((value != null))
					{
						value.Postings.Add(this);
						this._acc_id = value.id;
					}
					else
					{
						this._acc_id = default(Nullable<int>);
					}
					this.SendPropertyChanged("ChartOfAccount");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.TrialBalance")]
	public partial class TrialBalance
	{
		
		private string _AccountId;
		
		private string _AccountName;
		
		private System.Nullable<double> _Debit;
		
		private System.Nullable<double> _Credit;
		
		public TrialBalance()
		{
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AccountId", DbType="NVarChar(50)")]
		public string AccountId
		{
			get
			{
				return this._AccountId;
			}
			set
			{
				if ((this._AccountId != value))
				{
					this._AccountId = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AccountName", DbType="NVarChar(MAX)")]
		public string AccountName
		{
			get
			{
				return this._AccountName;
			}
			set
			{
				if ((this._AccountName != value))
				{
					this._AccountName = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Debit", DbType="Float")]
		public System.Nullable<double> Debit
		{
			get
			{
				return this._Debit;
			}
			set
			{
				if ((this._Debit != value))
				{
					this._Debit = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Credit", DbType="Float")]
		public System.Nullable<double> Credit
		{
			get
			{
				return this._Credit;
			}
			set
			{
				if ((this._Credit != value))
				{
					this._Credit = value;
				}
			}
		}
	}
	
	public partial class CheckNameOfChartOfAccountsResult
	{
		
		private string _name;
		
		public CheckNameOfChartOfAccountsResult()
		{
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_name", DbType="NVarChar(MAX)")]
		public string name
		{
			get
			{
				return this._name;
			}
			set
			{
				if ((this._name != value))
				{
					this._name = value;
				}
			}
		}
	}
	
	public partial class GenerateTrialBalanceResult
	{
		
		private string _AccountId;
		
		private string _AccountName;
		
		private System.Nullable<double> _Debit;
		
		private System.Nullable<double> _Credit;
		
		public GenerateTrialBalanceResult()
		{
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AccountId", DbType="NVarChar(50)")]
		public string AccountId
		{
			get
			{
				return this._AccountId;
			}
			set
			{
				if ((this._AccountId != value))
				{
					this._AccountId = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AccountName", DbType="NVarChar(MAX)")]
		public string AccountName
		{
			get
			{
				return this._AccountName;
			}
			set
			{
				if ((this._AccountName != value))
				{
					this._AccountName = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Debit", DbType="Float")]
		public System.Nullable<double> Debit
		{
			get
			{
				return this._Debit;
			}
			set
			{
				if ((this._Debit != value))
				{
					this._Debit = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Credit", DbType="Float")]
		public System.Nullable<double> Credit
		{
			get
			{
				return this._Credit;
			}
			set
			{
				if ((this._Credit != value))
				{
					this._Credit = value;
				}
			}
		}
	}
	
	public partial class GetAccountIdResult
	{
		
		private System.Nullable<int> _Column1;
		
		public GetAccountIdResult()
		{
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="", Storage="_Column1", DbType="Int")]
		public System.Nullable<int> Column1
		{
			get
			{
				return this._Column1;
			}
			set
			{
				if ((this._Column1 != value))
				{
					this._Column1 = value;
				}
			}
		}
	}
	
	public partial class ShowChartOfAccountsResult
	{
		
		private int _ID;
		
		private string _ACCOUNT_ID;
		
		private string _NAME;
		
		private string _TYPE;
		
		private System.Nullable<System.DateTime> _OPENING_DATE;
		
		public ShowChartOfAccountsResult()
		{
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", DbType="Int NOT NULL")]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this._ID = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="[ACCOUNT ID]", Storage="_ACCOUNT_ID", DbType="NVarChar(50)")]
		public string ACCOUNT_ID
		{
			get
			{
				return this._ACCOUNT_ID;
			}
			set
			{
				if ((this._ACCOUNT_ID != value))
				{
					this._ACCOUNT_ID = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_NAME", DbType="NVarChar(MAX)")]
		public string NAME
		{
			get
			{
				return this._NAME;
			}
			set
			{
				if ((this._NAME != value))
				{
					this._NAME = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TYPE", DbType="NVarChar(50)")]
		public string TYPE
		{
			get
			{
				return this._TYPE;
			}
			set
			{
				if ((this._TYPE != value))
				{
					this._TYPE = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="[OPENING DATE]", Storage="_OPENING_DATE", DbType="Date")]
		public System.Nullable<System.DateTime> OPENING_DATE
		{
			get
			{
				return this._OPENING_DATE;
			}
			set
			{
				if ((this._OPENING_DATE != value))
				{
					this._OPENING_DATE = value;
				}
			}
		}
	}
	
	public partial class ShowFiscalYearResult
	{
		
		private int _id;
		
		private System.Nullable<System.DateTime> _f_from;
		
		private System.Nullable<System.DateTime> _f_to;
		
		private System.Nullable<System.DateTime> _e_date;
		
		public ShowFiscalYearResult()
		{
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id", DbType="Int NOT NULL")]
		public int id
		{
			get
			{
				return this._id;
			}
			set
			{
				if ((this._id != value))
				{
					this._id = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_f_from", DbType="Date")]
		public System.Nullable<System.DateTime> f_from
		{
			get
			{
				return this._f_from;
			}
			set
			{
				if ((this._f_from != value))
				{
					this._f_from = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_f_to", DbType="Date")]
		public System.Nullable<System.DateTime> f_to
		{
			get
			{
				return this._f_to;
			}
			set
			{
				if ((this._f_to != value))
				{
					this._f_to = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_e_date", DbType="Date")]
		public System.Nullable<System.DateTime> e_date
		{
			get
			{
				return this._e_date;
			}
			set
			{
				if ((this._e_date != value))
				{
					this._e_date = value;
				}
			}
		}
	}
	
	public partial class ShowLedgersResult
	{
		
		private string _type;
		
		public ShowLedgersResult()
		{
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_type", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string type
		{
			get
			{
				return this._type;
			}
			set
			{
				if ((this._type != value))
				{
					this._type = value;
				}
			}
		}
	}
}
#pragma warning restore 1591
